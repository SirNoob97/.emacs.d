#+TITLE: Personal Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

* Stop GC during startup

#+begin_src emacs-lisp
;;; -*- lexical-binding: t -*-
;;Org mode fontification error in #<buffer init.org> at 14
  (setq gc-cons-percentage 0.6
        gc-cons-threshold most-positive-fixnum)
  (add-hook 'emacs-startup-hook
      (lambda ()
        (setq gc-cons-threshold 800000
        gc-cons-percentage 0.1)))
#+end_src

* Startup Info

#+begin_src emacs-lisp
  (defun sn/display-startup-time ()
    (message "*** Emacs loaded in %s with %d garbage collections ***"
           (format "%.2f seconds"
                   (float-time
                   (time-subtract after-init-time before-init-time)))
           gcs-done))

    (add-hook 'emacs-startup-hook 'sn/display-startup-time)
#+end_src

* Custom File

#+begin_src emacs-lisp
  (defun load-custom-file ()
    "Set `custom-file'."
    (interactive)
    (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
    (load custom-file))

  (load-custom-file)
#+end_src

* Update Load Path

#+begin_src emacs-lisp
  (defun update-load-path (&rest _)
    "Update `load-path'."
    (dolist (dir '("site-lisp" "lisp"))
      (push (expand-file-name dir user-emacs-directory) load-path)))

  (update-load-path)
#+end_src

* Setting

** Enconding

#+begin_src emacs-lisp
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8-unix)
  (prefer-coding-system 'utf-8-unix)
  (setq-default buffer-file-coding-system 'utf-8-unix)
  (setq coding-system-for-read 'utf-8-unix)
  (setq coding-system-for-write 'utf-8-unix)
#+end_src

** Misc

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :family "JetBrains Nerd Font Mono" :height 110)
  (fset 'yes-or-no-p 'y-or-n-p) ;; never have to type full word
  (windmove-default-keybindings 'meta)
  (set-default 'truncate-lines t)
  (setq confirm-kill-emacs 'y-or-n-p)
  (setq inhibit-splash-screen t)
  (setq initial-scratch-message nil)
  (setq initial-major-mode 'fundamental-mode)
  (setq auto-save-default nil)
  (setq auto-save-list-file-prefix nil)
  (setq make-backup-files nil)
  (setq create-lockfiles nil)
  (setq sentence-end-double-space nil)
  (setq require-final-newline t)
  (setq help-window-select t)
#+end_src

** Clipboard

#+begin_src emacs-lisp
  (setq select-enable-clipboard t)
  (setq select-enable-primary t)
  (setq x-select-enable-clipboard-manager nil)
  (setq save-interprogram-paste-before-kill t)
#+end_src

** Tab

#+begin_src emacs-lisp
  (setq backward-delete-char-untabify-method 'all)
  (setq-default c-basic-offset 2)
  (setq-default tab-width 2)
  (setq-default indent-tabs-mode nil)
#+end_src

** Line Numbers

#+begin_src emacs-lisp
  (global-display-line-numbers-mode t)
  ;(setq-default display-line-numbers-type 'relative)
  ; disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

* Functions

#+begin_src emacs-lisp
  (require 'init-functions)
#+end_src

* Keybindings

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c c u") 'sn-convert-to-unix-coding-system)
  (global-set-key (kbd "C-c s") 'sn-save-all-buffers-silently)
  (global-set-key (kbd "C-c b") 'sn-switch-last-buffer)
  (global-set-key (kbd "C-c +") 'sn-increment-number)
  (global-set-key (kbd "M-p") 'sn-move-line-up)
  (global-set-key (kbd "M-n") 'sn-move-line-down)
  (global-set-key (kbd "C-c f d") 'sn-delete-current-file)
  (global-set-key (kbd "C-c f s") 'sn-sudoedit)
  (global-set-key (kbd "C-c f r") 'sn-rename-current-file)
  (global-set-key (kbd "C-c f y") 'sn-copy-file-content)
  (global-set-key (kbd "C-c f n") 'sn-copy-file-name)
  (global-set-key (kbd "C-c C-r") 'sn-reload-init-file)

  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (global-set-key (kbd "M-%") 'query-replace-regexp)
  (global-set-key (kbd "M-;") 'comment-line) ; comment-dwin by default
  (global-set-key (kbd "C-M-;") 'comment-dwim) ; unbound by default
  (global-set-key (kbd "C-c e b") 'eval-buffer)
  (global-set-key (kbd "C-c e f") 'eval-defun)
  (global-set-key (kbd "C-c n") 'next-buffer)
  (global-set-key (kbd "C-c p") 'previous-buffer)

  (global-set-key (kbd "M-\"") 'sn-surround-with-quotes)
  (global-set-key (kbd "M-'") 'sn-surround-with-single-quotes)
  (global-set-key (kbd "M-`") 'sn-surround-with-backquotes)
#+end_src

* Hooks

#+begin_src emacs-lisp
  (add-hook 'compilation-filter-hook 'sn-ansi-colorize-buffer)

  ;; reload if file changed on disk
  (add-hook 'after-init-hook 'global-auto-revert-mode)

  ;; Eldoc
  (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
  (add-hook 'lisp-interaction-mode-hook 'eldoc-mode)
  (add-hook 'lisp-mode-hook 'eldoc-mode)

  ;; Electric
  (add-hook 'after-init-hook 'electric-indent-mode)
  (add-hook 'after-init-hook 'electric-pair-mode)

  ;; Show paren
  (add-hook 'after-init-hook 'show-paren-mode)
#+end_src

* Package

#+begin_src emacs-lisp
  (require 'package)
  (require 'cl-lib)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("elpa" . "https://elpa.gnu.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ))
  (unless (bound-and-true-p package--initialized)
    (setq package-enable-at-startup nil)					; To prevent initializing twice
    (package-initialize))

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-and-compile
    (setq use-package-always-ensure t)
    (setq use-package-always-defer t)
    (setq use-package-expand-minimally t)
    (setq use-package-enablen-imenu-support t))

  (eval-and-compile
    (require 'use-package)
    (require 'bind-key))

  (use-package diminish)
#+end_src

* Awesome Packages

** Themes

#+begin_src emacs-lisp
  (use-package spacemacs-theme
    :ensure t
    :init
    (setq spacemacs-theme-comment-bg nil)
    (setq spacemacs-theme-org-height nil)
    (setq spacemacs-theme-org-bold nil)
    (setq spacemacs-theme-org-priority-bold nil))

  (use-package dracula-theme
    :ensure t)

  (load-theme 'spacemacs-dark)
#+end_src

** Iedit

#+begin_src emacs-lisp
  (use-package iedit
    :defer 1
    :ensure t)
#+end_src

** Exec path from Shell

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config
    (setq exec-path-from-shell-arguments nil))
  (exec-path-from-shell-initialize)
#+end_src

** XClip

#+begin_src emacs-lisp
  (use-package xclip
    :ensure t
    :config (xclip-mode 1))
#+end_src

** Doom Modeline

#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode)
    :config
    ;(setq find-file-visit-truename t) ; to short symlinks
    (setq inhibit-compacting-font-caches t)
    (setq doom-modeline-buffer-file-name-style 'file-name)
    (setq doom-modeline-unicode-fallback nil)
    (setq doom-modeline-gnus nil)
    (setq doom-modeline-irc nil)
    (setq doom-modeline-icon nil))
#+end_src

** Wich Key

#+begin_src emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :defer 1
    :config
    (which-key-mode))
#+end_src

** Ivy-Counsel

#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :diminish ivy-mode
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           ("<backtab>" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-l" . ivy-done)
           ("<backtab>" . ivy-previous-line)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode t))

  (use-package counsel
    :ensure t
    :defer 1
    :bind (("C-M-j" . 'counsel-switch-buffer)
           :map minibuffer-local-map
           ("C-M-r" . 'counsel-minibuffer-history))
    :config
    (counsel-mode t))
#+end_src

** Evil Mode

#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :defer 1
    :init
    (setq evil-want-keybinding nil)
    (setq evil-want-integration t)
    (setq evil-undo-system 'undo-redo)
    :config
    (evil-mode t)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state))

  (use-package evil-collection
    :ensure t
    :after evil
    :init
    (evil-collection-init))
#+end_src

* Org Mode

#+begin_src emacs-lisp
  (defun sn-org-setup ()
    (org-indent-mode)
    (setq evil-auto-indent nil))

  (add-hook 'org-mode-hook 'sn-org-setup)

  (setq org-startup-folded 'content)

  ;;; Languages docs https://orgmode.org/worg/org-contrib/babel/languages/index.html
  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (shell . t)
       (python . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))

  (with-eval-after-load 'evil
    (evil-define-key '(normal insert visual) org-mode-map (kbd "M-j") 'org-metadown)
    (evil-define-key '(normal insert visual) org-mode-map (kbd "M-k") 'org-metaup))

  (with-eval-after-load (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("ja" . "src java"))
    (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("go" . "src go"))
    (add-to-list 'org-structure-template-alist '("ya" . "src yaml"))
    (add-to-list 'org-structure-template-alist '("json" . "src json")))
#+end_src

* Software Development

** Company

#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :hook (lsp-deferred . company-mode)
    :bind (("C-<tab>" . company-complete)
           :map company-active-map
           ("<tab>" . company-select-next)
           ("<backtab>" . company-select-previous))
    :config
    (setq company-idle-delay nil)
    (setq company-selection-wrap-around t)
    (setq company-tooltip-flip-when-above t)
    (setq company-tooltip-align-annotations t))
#+end_src

** Yasnippet

#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :hook (prog-mode . yas-minor-mode)
    :config (yas-reload-all))
#+end_src

** Flycheck

#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :bind (:map flycheck-mode-map
                ("M-]" . flycheck-next-error)
                ("M-[" . flycheck-previous-error))
    :hook (lsp-deferred . flycheck-mode)
    :init
    (setq-default flycheck-emacs-lisp-load-path 'inherit))

  (add-to-list 'display-buffer-alist
               `(,(rx bos "*Flycheck errors*" eos)
                 (display-buffer-reuse-window
                  display-buffer-in-side-window)
                 (side . bottom)
                 (reusable-frames . visible)
                 (window-height . 0.25)))
#+end_src

** Treemacs

#+begin_src emacs-lisp
  (use-package lsp-treemacs
    :after (lsp-mode treemacs)
    :ensure t)

  (use-package treemacs
    :ensure t
    :bind (:map global-map
                ("C-c t d" . treemacs-delete-other-windows)
                ("C-c t t" . treemacs)
                ("C-c t b" . treemacs-bookmark)
                ("C-c t f" . treemacs-find-file))
    :config
    (setq treemacs-no-png-images t))
#+end_src

** Dap Mode

#+begin_src emacs-lisp
  (use-package dap-mode
    :bind (:map lsp-mode-map
                ("<f2>" . dap-debug)
                ("M-<f2>" . dap-hydra)
                ("C-c l d b" . dap-ui-breakpoints)
                :map dap-mode-map
                ("<f5>" . dap-next)
                ("<f6>" . dap-step-in)
                ("<f7>" . dap-step-out)
                ("<f8>" . dap-continue)
                ("<f9>" . dap-breakpoint-toggle))
    :config
    (dap-mode t)
    ;; following only works on gui
    (dap-ui-mode t)
    (dap-tooltip-mode 1)
    (tooltip-mode 1))
#+end_src

** Lsp UI

#+begin_src emacs-lisp
  (use-package lsp-ui
    :ensure t
    :hook (lsp-mode . lsp-ui-mode)
    :bind (:map lsp-ui-mode-map
           ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
           ([remap xref-find-references] . lsp-ui-peek-find-references))
    :init
    (setq lsp-ui-peek-always-show t)
    (setq	lsp-ui-doc-position 'at-point)
    (setq lsp-ui-doc-delay 1.5)
    (setq	lsp-ui-doc-include-signature t)
    (setq	lsp-ui-doc-max-width 100)
    (setq	lsp-ui-doc-show-with-cursor nil)
    (setq	lsp-ui-doc-show-with-mouse nil)
    (setq lsp-ui-sideline-ignore-duplicate t)
    (setq lsp-ui-sideline-show-diagnostics t)
    (setq lsp-ui-sideline-show-code-actions nil)
    :config
    (define-key lsp-ui-mode-map (kbd "C-c l k") 'lsp-ui-doc-show)
    (define-key lsp-ui-mode-map (kbd "C-c l s") 'lsp-ui-doc-hide))
#+end_src

** Lsp Mode

#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :commands (lsp lsp-deferred)
    :bind
    (:map lsp-mode-map
          ("M-RET" . lsp-execute-code-action)
          ("C-c l f b" . lsp-format-buffer)
          ("C-c l f r" . lsp-format-region))
    :hook (lsp-mode . lsp-enable-which-key-integration)
    :init
    (setq lsp-keymap-prefix "C-c l") ; this is for which-key integration documentation, need to use lsp-mode-map
    (setq lsp-enable-file-watchers nil)
    (setq lsp-headerline-breadcrumb-enable nil)
    (setq lsp-lens-enable nil)
    (setq lsp-eldoc-enable-hover nil)
    (setq lsp-enable-on-type-formatting nil)
    (setq lsp-modeline-diagnostics-enable nil) ; flycheck handle this
    (setq lsp-log-io nil)
    (setq read-process-output-max (* 1024 1024))	; 1 mb
    (setq lsp-idle-delay 0.500)
    :config
    (setq gc-cons-threshold 100000000)
    (define-key lsp-mode-map (kbd "C-c l") lsp-command-map))
#+end_src

** Java Mode

#+begin_src emacs-lisp
  (use-package lsp-java
    :ensure t
    :init
    (setq lsp-java-java-path "/home/martin/.sdkman/candidates/java/current/bin/java")
    (setq lsp-java-vmargs
          (list
           "-Declipse.application=org.eclipse.jdt.ls.core.id1"
           "-Dosgi.bundles.defaultStartLevel=4"
           "-Declipse.product=org.eclipse.jdt.ls.core.product"
           "-Dlog.protocol=true"
           "-Dlog.level=ALL"
           "-noverify"
           "-Xmx1G"
           "-XX:+UseG1GC"
           "-XX:+UseStringDeduplication"
           "-javaagent:/home/martin/.m2/repository/org/projectlombok/lombok/1.18.24/lombok-1.18.24.jar"))
    (setq lsp-java-format-settings-url "https://raw.githubusercontent.com/google/styleguide/gh-pages/eclipse-java-google-style.xml")
    (setq lsp-java-content-provider-preferred "fernflower")
    (setq lsp-java-configuration-runtimes '[(:name "Java 11" :path "/home/martin/.sdkman/candidates/java/11.0.15-tem")
                                            (:name "Java 17" :path "/home/martin/.sdkman/candidates/java/17.0.3-tem")
                                            ])
    :hook
    (java-mode . lsp-deferred))

  (use-package dap-java
    :ensure nil
    :after (lsp-java))
#+end_src

** Front End

*** Typescript

#+begin_src emacs-lisp
  (use-package typescript-mode
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq lsp-enabled-clients '(ts-ls))
    (setq typescript-indent-level 2))
#+end_src

*** Web Mode

#+begin_src emacs-lisp
;; TODO try to exclude angular html files for use web mode
  (use-package web-mode
    :config
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-attr-indent-offset 2)
    (setq web-mode-css-indent-offset 2))
#+end_src

*** NG2 mode

#+begin_src emacs-lisp
  (use-package ng2-mode
    :hook (ng2-html-mode . lsp-deferred))
#+end_src

** Python

#+begin_src emacs-lisp
  (use-package lsp-pyright
    :hook
    (python-mode . lsp-deferred)
    :config
    (setq lsp-pyright-log-level "error"))

  ;; There's also blacken if you like it better.
  (use-package yapfify
    :hook (python-mode . yapf-mode))
#+end_src

** Go

#+begin_src emacs-lisp
  (use-package go-mode
    :hook (go-mode . lsp-deferred))
#+end_src

* TODO check if settings doesnt work

;(defun ansi-colorize-buffer ()
;	 "This will help eliminate weird escape sequences during compilation of projects."
;	 (let ((buffer-read-only nil))
;		 (ansi-color-apply-on-region (point-min) (point-max))))
;
;(use-package ansi-color
;	 :ensure t
;	 :config
;	 (add-hook 'compilation-filter-hook 'ansi-colorize-buffer))
