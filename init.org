* Stop GC during startup

#+begin_src emacs_lisp
(setq gc-cons-percentage 0.6
      gc-cons-threshold most-positive-fixnum)
(add-hook 'emacs-startup-hook
	  (lambda ()
	    (setq gc-cons-threshold 800000
		  gc-cons-percentage 0.1)))
#+end_src

* Custom File

#+begin_src emacs_lisp
(defun load-custom-file ()
  "Set `custom-file'."
  (interactive)
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file))

(load-custom-file)
#+end_src

* Update Load Path

#+begin_src emacs_lisp
(defun update-load-path (&rest _)
  "Update `load-path'."
  (dolist (dir '("site-lisp" "lisp"))
    (push (expand-file-name dir user-emacs-directory) load-path)))

(update-load-path)
#+end_src

* Setting
** Enconding

#+begin_src emacs_lisp
(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8-unix)
(prefer-coding-system 'utf-8-unix)
(setq-default buffer-file-coding-system 'utf-8-unix)
(setq coding-system-for-read 'utf-8-unix)
(setq coding-system-for-write 'utf-8-unix)
#+end_src

** Misc

#+begin_src emacs_lisp
(add-to-list 'default-frame-alist '(font . "Hack Nerd Font Mono-11"))
(fset 'yes-or-no-p 'y-or-n-p) ;; never have to type full word
(windmove-default-keybindings 'meta)
(set-default 'truncate-lines t)
(setq confirm-kill-emacs 'y-or-n-p)
(setq initial-scratch-message nil)
(setq initial-major-mode 'fundamental-mode)
(setq auto-save-default nil)
(setq make-backup-files nil)
(setq create-lockfiles nil)
(setq sentence-end-double-space nil)
(setq require-final-newline t)
(setq help-window-select t)
#+end_src

** Clipboard

#+begin_src emacs_lisp
(setq select-enable-clipboard t)
(setq select-enable-primary t)
(setq x-select-enable-clipboard-manager nil)
(setq save-interprogram-paste-before-kill t)
#+end_src

** Tab

#+begin_src emacs_lisp
(setq backward-delete-char-untabify-method 'all)
(setq-default c-basic-offset 2)
(setq-default tab-width 2)
(setq-default indent-tabs-mode nil)
#+end_src

** Line Numbers

#+begin_src emacs_lisp
(global-display-line-numbers-mode t)
;(setq-default display-line-numbers-type 'relative)
; disable line numbers for some modes
(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                treemacs-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

* Functions

#+begin_src emacs_lisp
  (require 'init-functions)
#+end_src

* Keybindings

#+begin_src emacs_lisp
(global-set-key (kbd "C-c c u") 'sn-convert-to-unix-coding-system)
(global-set-key (kbd "C-c s") 'sn-save-all-buffers-silently)
(global-set-key (kbd "C-c b") 'sn-switch-last-buffer)
(global-set-key (kbd "C-c +") 'sn-increment-number)
(global-set-key (kbd "M-p") 'sn-move-line-up)
(global-set-key (kbd "M-n") 'sn-move-line-down)
(global-set-key (kbd "C-c f d") 'sn-delete-current-file)
(global-set-key (kbd "C-c f s") 'sn-sudoedit)
(global-set-key (kbd "C-c f r") 'sn-rename-current-file)
(global-set-key (kbd "C-c f y") 'sn-copy-file-content)
(global-set-key (kbd "C-c f n") 'sn-copy-file-name)
(global-set-key (kbd "C-c C-r") 'sn-reload-init-file)

(global-set-key (kbd "C-x C-b") 'ibuffer)
(global-set-key (kbd "M-%") 'query-replace-regexp)
(global-set-key (kbd "M-;") 'comment-line) ; comment-dwin by default
(global-set-key (kbd "C-M-;") 'comment-dwim) ; unbound by default
(global-set-key (kbd "C-c e b") 'eval-buffer)
(global-set-key (kbd "C-c e f") 'eval-defun)
(global-set-key (kbd "C-c n") 'next-buffer)
(global-set-key (kbd "C-c p") 'previous-buffer)

(global-set-key (kbd "M-\"") 'sn-surround-with-quotes)
(global-set-key (kbd "M-'") 'sn-surround-with-single-quotes)
(global-set-key (kbd "M-`") 'sn-surround-with-backquotes)
#+end_src

* Hooks

#+begin_src emacs_lisp
(add-hook 'compilation-filter-hook 'sn-ansi-colorize-buffer)
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)

;; reload if file changed on disk
(add-hook 'after-init-hook 'global-auto-revert-mode)

;; Eldoc
(add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
(add-hook 'lisp-interaction-mode-hook 'eldoc-mode)
(add-hook 'lisp-mode-hook 'eldoc-mode)

;; Electric
(add-hook 'after-init-hook 'electric-indent-mode)
(add-hook 'after-init-hook 'electric-pair-mode)

;; Show paren
(add-hook 'after-init-hook 'show-paren-mode)
#+end_src

* Package
#+begin_src emacs_lisp
(require 'package)
(require 'cl-lib)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("elpa" . "https://elpa.gnu.org/packages/")
			                   ("org" . "https://orgmode.org/elpa/")
			                   ))
(unless (bound-and-true-p package--initialized)
  (setq package-enable-at-startup nil)          ; To prevent initializing twice
  (package-initialize))

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-and-compile
  (setq use-package-always-ensure t)
  (setq use-package-always-defer t)
  (setq use-package-expand-minimally t)
  (setq use-package-enablen-imenu-support t))

(eval-and-compile
  (require 'use-package)
  (require 'bind-key))

(use-package diminish)
#+end_src
